apply plugin: 'com.android.application'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'

android {
    compileSdk 35
    namespace "ai.elimu.vitabu"

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 35
        versionCode 1001009
        versionName '1.1.9-SNAPSHOT'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            manifestPlaceholders = [contentProviderApplicationId: "ai.elimu.content_provider.debug"]
            buildConfigField("String", "CONTENT_PROVIDER_APPLICATION_ID", '"ai.elimu.content_provider.debug"')
            buildConfigField("String", "ANALYTICS_APPLICATION_ID", '"ai.elimu.analytics.debug"')
            buildConfigField("String", "APPSTORE_APPLICATION_ID", '"ai.elimu.appstore.debug"')
        }
        release {
            minifyEnabled false
            manifestPlaceholders = [contentProviderApplicationId: "ai.elimu.content_provider"]
            buildConfigField("String", "CONTENT_PROVIDER_APPLICATION_ID", '"ai.elimu.content_provider"')
            buildConfigField("String", "ANALYTICS_APPLICATION_ID", '"ai.elimu.analytics"')
            buildConfigField("String", "APPSTORE_APPLICATION_ID", '"ai.elimu.appstore"')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        buildConfig = true
        viewBinding true
    }

    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation libs.elimu.model // https://jitpack.io/#elimu-ai/model
    implementation libs.elimu.content.provider // https://jitpack.io/#elimu-ai/content-provider
    implementation libs.elimu.analytics // https://jitpack.io/#elimu-ai/analytics
    implementation libs.elimu.common.utils // https://jitpack.io/#elimu-ai/common-utils

    implementation libs.androidx.appcompat
    implementation libs.material
    implementation libs.androidx.constraint.layout
    implementation libs.flexbox

    implementation libs.glide

    implementation libs.kotlin.coroutines
    implementation libs.androidx.core.ktx
    implementation libs.hilt.android
    kapt libs.hilt.compiler

    testImplementation libs.junit

    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso
}

publishing {
    publications {
        apk(MavenPublication) {
            artifact("${buildDir}/outputs/apk/release/app-release-unsigned.apk")
        }
    }
}
tasks.named("publishApkPublicationToMavenLocal") {
    mustRunAfter(":app:assembleRelease")
}

task ensureCleanRepo {
    doLast {
        if (!grgit.repository.jgit.status().call().clean) {
            throw new GradleException('Git status is not clean, please stash your changes!')
        }
    }
}
task releaseClean(dependsOn: ensureCleanRepo) {
    doLast {
        def clean = true
        def applicationId = android.defaultConfig.applicationId

        String headCommitMessage = grgit.head().shortMessage
        while (headCommitMessage.contains("[gradle-release-task]")) {
            clean = false
            println "Found git commit: $headCommitMessage"
            if (headCommitMessage.indexOf("$applicationId-") > -1) {
                def tagName = headCommitMessage.split("$applicationId-")[1]
                println "Removing the git tag: $tagName"
                try {
                    grgit.tag.remove {
                        names = [tagName]
                    }
                } catch (Exception e) {
                    println "Error while removing git tag:\n $e"
                }
            }
            println "Resetting the git commit permanently!"
            grgit.reset(commit: "HEAD~1", mode: "hard")
            headCommitMessage = grgit.head().shortMessage

        }
        if (clean){
            println "Repository is already clean"
        }
        println "Done!"
    }
}

// Task parameters:
//    bumpVersion -> if available will specify new versionName directly and ignores the `bumpType` parameter.
//    bumpType[major|minor|patch] -> will specify how the version bumping occurs.
task releasePrepare(dependsOn: ensureCleanRepo) {
    doLast {
        def applicationId = android.defaultConfig.applicationId
        def versionName = android.defaultConfig.versionName

        if (versionName.indexOf("-") > -1) {
            versionName = versionName.split("-")[0]
        }

        // Prepare the release commit with the specific tag.
        String buildText = buildFile.getText()
        buildText = buildText.replaceFirst(/versionName(\s+.*)/, "versionName '$versionName'")
        buildFile.setText(buildText) //replace the build file's text
        grgit.add(patterns: ['app/build.gradle'])
        grgit.commit(message: "[gradle-release-task] prepare release $applicationId-$versionName")
        try {
            grgit.tag.add {
                name = versionName
                message = "Release of $versionName"
            }
        } catch (Exception e) {
            throw new GradleException("Failed to tag the repo, error:\n $e")
        }


        // Set new version name from input parameters.
        def newVersionName
        if (project.properties.containsKey("bumpVersion")) {
            newVersionName = project.properties["bumpVersion"]
            println "Bumping the version directly (bumpVersion=$newVersionName)"
        } else if (project.properties.containsKey("bumpType")) {
            def (major, minor, patch) = versionName.tokenize('.')
            switch (bumpType) {
                case "major":
                    major = major.toInteger() + 1
                    minor = 0
                    patch = 0
                    break
                case "minor":
                    minor = minor.toInteger() + 1
                    break
                case "patch":
                    patch = patch.toInteger() + 1
                    break
            }
            newVersionName = "$major.$minor.$patch"
        } else {
            throw new GradleException('Either bumpType or bumpVersion parameters should be provided')
        }

        // Prepare for next development iteration.
        def versionCode = android.defaultConfig.versionCode
        def newVersionCode = versionCode + 1
        println "Bumping versionName from $versionName to $newVersionName"
        println "Bumping versionCode from $versionCode to $newVersionCode"
        buildText = buildFile.getText()
        buildText = buildText.replaceFirst(/versionName(\s+.*)/, "versionName '$newVersionName-SNAPSHOT'")
        buildText = buildText.replaceFirst(/versionCode(\s+.*)/, "versionCode $newVersionCode")
        buildFile.setText(buildText) //replace the build file's text
        grgit.add(patterns: ['app/build.gradle'])
        grgit.commit(message: "[gradle-release-task] prepare for next development iteration")
        println "Done!"
    }

}

task releasePerform(dependsOn: ensureCleanRepo) {
    doLast {
        boolean force = false
        if (project.properties.containsKey("force")) {
            force = project.properties["force"]
        }
        println "Pushing the newest commits to the remote repository (force: $force)"
        try {
            grgit.push(force: force, tags: true)
        } catch (Exception e) {
            throw new GradleException("Failed to push to the repo,\n" +
                    " you can try using -Pforce=true parameter to force the push, error: \n$e")
        }
        println "Done!"
    }
}
